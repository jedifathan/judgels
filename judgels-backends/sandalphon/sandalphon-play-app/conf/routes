# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file           controllers.Assets.at(path="/public", file)
GET         /vassets/*file          controllers.Assets.versioned(path="/public", file: Asset)

# Home page
GET        /favicon                 @org.iatoki.judgels.play.JudgelsController.favicon()
GET        /logo                    @org.iatoki.judgels.play.JudgelsController.logo()


GET        /login                            @org.iatoki.judgels.jophiel.JophielClientController.login(req: Request)
POST       /login                            @org.iatoki.judgels.jophiel.JophielClientController.postLogin(req: Request)
GET        /logout                           @org.iatoki.judgels.jophiel.JophielClientController.logout(returnUri: String ?= "")


GET         /                                                                       org.iatoki.judgels.sandalphon.ApplicationController.index()

GET         /problems                                                               org.iatoki.judgels.sandalphon.problem.base.ProblemController.index(req: Request)
GET         /problems/                                                              org.iatoki.judgels.sandalphon.problem.base.ProblemController.listProblems(req: Request, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "asc", filterString ?= "", tags: java.util.List[String] ?= null)
GET         /problems/new                                                           org.iatoki.judgels.sandalphon.problem.base.ProblemController.createProblem(req: Request)
POST        /problems                                                               org.iatoki.judgels.sandalphon.problem.base.ProblemController.postCreateProblem(req: Request)
GET         /problems/programming/new                                               org.iatoki.judgels.sandalphon.problem.programming.ProgrammingProblemController.createProgrammingProblem(req: Request)
POST        /problems/programming                                                   org.iatoki.judgels.sandalphon.problem.programming.ProgrammingProblemController.postCreateProgrammingProblem(req: Request)
GET         /problems/bundle/new                                                    org.iatoki.judgels.sandalphon.problem.bundle.BundleProblemController.createBundleProblem(req: Request)

GET         /problems/:problemId                                                    org.iatoki.judgels.sandalphon.problem.base.ProblemController.viewProblem(req: Request, problemId: Long)
GET         /problems/:problemId/edit                                               org.iatoki.judgels.sandalphon.problem.base.ProblemController.editProblem(req: Request, problemId: Long)
POST        /problems/:problemId                                                    org.iatoki.judgels.sandalphon.problem.base.ProblemController.postEditProblem(req: Request, problemId: Long)

GET         /problems/:problemId/enter                                              org.iatoki.judgels.sandalphon.problem.base.ProblemController.enterProblem(problemId: Long)

GET         /problems/:problemId/jumpToStatements                                   org.iatoki.judgels.sandalphon.problem.base.ProblemController.jumpToStatement(problemId: Long)
GET         /problems/:problemId/jumpToEditorials                                   org.iatoki.judgels.sandalphon.problem.base.ProblemController.jumpToEditorial(problemId: Long)
GET         /problems/:problemId/jumpToVersions                                     org.iatoki.judgels.sandalphon.problem.base.ProblemController.jumpToVersions(problemId: Long)
GET         /problems/:problemId/jumpToPartners                                     org.iatoki.judgels.sandalphon.problem.base.ProblemController.jumpToPartners(problemId: Long)

POST        /problems/:problemId/switchLanguage                                     org.iatoki.judgels.sandalphon.problem.base.ProblemController.switchLanguage(req: Request, problemId: Long)

GET         /problems/:problemId/statements                                         org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.viewStatement(problemId: Long)
GET         /problems/:problemId/statements/edit                                    org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.editStatement(req: Request, problemId: Long)
POST        /problems/:problemId/statements                                         org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.postEditStatement(req: Request, problemId: Long)
GET         /problems/:problemId/statements/media                                   org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.listStatementMediaFiles(req: Request, problemId: Long)
POST        /problems/:problemId/statements/media                                   org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.postUploadStatementMediaFiles(req: Request, problemId: Long)
GET         /problems/:problemId/statements/languages                               org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.listStatementLanguages(req: Request, problemId: Long)
POST        /problems/:problemId/statements/languages                               org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.postAddStatementLanguage(req: Request, problemId: Long)
GET         /problems/:problemId/statements/languages/:language/enable              org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.enableStatementLanguage(req: Request, problemId: Long, language)
GET         /problems/:problemId/statements/languages/:language/disable             org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.disableStatementLanguage(req: Request, problemId: Long, language)
GET         /problems/:problemId/statements/languages/:language/makeDefault         org.iatoki.judgels.sandalphon.problem.base.statement.ProblemStatementController.makeDefaultStatementLanguage(req: Request, problemId: Long, language)

GET         /problems/:problemId/editorials                                         org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.viewEditorial(req: Request, problemId: Long)
GET         /problems/:problemId/editorials/new                                     org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.createEditorial(req: Request, problemId: Long)
POST        /problems/:problemId/editorials/new                                     org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.postCreateEditorial(req: Request, problemId: Long)
GET         /problems/:problemId/editorials/edit                                    org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.editEditorial(req: Request, problemId: Long)
POST        /problems/:problemId/editorials                                         org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.postEditEditorial(req: Request, problemId: Long)
GET         /problems/:problemId/editorials/media                                   org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.listEditorialMediaFiles(req: Request, problemId: Long)
POST        /problems/:problemId/editorials/media                                   org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.postUploadEditorialMediaFiles(req: Request, problemId: Long)
GET         /problems/:problemId/editorials/languages                               org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.listEditorialLanguages(req: Request, problemId: Long)
POST        /problems/:problemId/editorials/languages                               org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.postAddEditorialLanguage(req: Request, problemId: Long)
GET         /problems/:problemId/editorials/languages/:language/enable              org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.enableEditorialLanguage(req: Request, problemId: Long, language)
GET         /problems/:problemId/editorials/languages/:language/disable             org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.disableEditorialLanguage(req: Request, problemId: Long, language)
GET         /problems/:problemId/editorials/languages/:language/makeDefault         org.iatoki.judgels.sandalphon.problem.base.editorial.ProblemEditorialController.makeDefaultEditorialLanguage(req: Request, problemId: Long, language)

GET         /problems/:problemId/partners                                           org.iatoki.judgels.sandalphon.problem.base.partner.ProblemPartnerController.viewPartners(req: Request, problemId: Long)
GET         /problems/:problemId/partners/                                          org.iatoki.judgels.sandalphon.problem.base.partner.ProblemPartnerController.listPartners(req: Request, problemId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")
GET         /problems/:problemId/partners/add                                       org.iatoki.judgels.sandalphon.problem.base.partner.ProblemPartnerController.addPartner(req: Request, problemId: Long)
GET         /problems/:problemId/partners/:partnerId/edit                           org.iatoki.judgels.sandalphon.problem.base.partner.ProblemPartnerController.editPartner(req: Request, problemId: Long, partnerId: Long)

GET         /problems/:problemId/versions/history                                   org.iatoki.judgels.sandalphon.problem.base.version.ProblemVersionController.listVersionHistory(req: Request, problemId: Long)
GET         /problems/:problemId/versions/history/:hash/restore                     org.iatoki.judgels.sandalphon.problem.base.version.ProblemVersionController.restoreVersionHistory(req: Request, problemId: Long, hash)
GET         /problems/:problemId/versions/local                                     org.iatoki.judgels.sandalphon.problem.base.version.ProblemVersionController.viewVersionLocalChanges(req: Request, problemId: Long)
POST        /problems/:problemId/versions/local                                     org.iatoki.judgels.sandalphon.problem.base.version.ProblemVersionController.postCommitVersionLocalChanges(req: Request, problemId: Long)
GET         /problems/:problemId/versions/local/rebase                              org.iatoki.judgels.sandalphon.problem.base.version.ProblemVersionController.editVersionLocalChanges(req: Request, problemId: Long)
GET         /problems/:problemId/versions/local/discard                             org.iatoki.judgels.sandalphon.problem.base.version.ProblemVersionController.discardVersionLocalChanges(req: Request, problemId: Long)

GET         /problems/programming/:problemId/jumpToGrading                          org.iatoki.judgels.sandalphon.problem.programming.ProgrammingProblemController.jumpToGrading(problemId: Long)
GET         /problems/programming/:problemId/jumpToSubmissions                      org.iatoki.judgels.sandalphon.problem.programming.ProgrammingProblemController.jumpToSubmissions(problemId: Long)

GET         /problems/programming/:problemId/statements                             org.iatoki.judgels.sandalphon.problem.programming.statement.ProgrammingProblemStatementController.viewStatement(req: Request, problemId: Long)

GET         /problems/programming/:problemId/partners/add                           org.iatoki.judgels.sandalphon.problem.programming.partner.ProgrammingProblemPartnerController.addPartner(req: Request, problemId: Long)
POST        /problems/programming/:problemId/partners                               org.iatoki.judgels.sandalphon.problem.programming.partner.ProgrammingProblemPartnerController.postAddPartner(req: Request, problemId: Long)
GET         /problems/programming/:problemId/partners/:partnerId/edit               org.iatoki.judgels.sandalphon.problem.programming.partner.ProgrammingProblemPartnerController.editPartner(req: Request, problemId: Long, partnerId: Long)
POST        /problems/programming/:problemId/partners/:partnerId                    org.iatoki.judgels.sandalphon.problem.programming.partner.ProgrammingProblemPartnerController.postEditPartner(req: Request, problemId: Long, partnerId: Long)

+nocsrf
POST        /problems/programming/:problemId/submissions                            org.iatoki.judgels.sandalphon.problem.programming.submission.ProgrammingProblemSubmissionController.postSubmit(req: Request, problemId: Long)
GET         /problems/programming/:problemId/submissions                            org.iatoki.judgels.sandalphon.problem.programming.submission.ProgrammingProblemSubmissionController.viewSubmissions(req: Request, problemId: Long)
GET         /problems/programming/:problemId/submissions/                           org.iatoki.judgels.sandalphon.problem.programming.submission.ProgrammingProblemSubmissionController.listSubmissions(req: Request, problemId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")
GET         /problems/programming/:problemId/submissions/:submissionId              org.iatoki.judgels.sandalphon.problem.programming.submission.ProgrammingProblemSubmissionController.viewSubmission(req: Request, problemId: Long, submissionId: Long)
GET         /problems/programming/:problemId/submissions/:submissionId/regrade      org.iatoki.judgels.sandalphon.problem.programming.submission.ProgrammingProblemSubmissionController.regradeSubmission(req: Request, problemId: Long, submissionId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")
+nocsrf
POST        /problems/programming/:problemId/submissions/regrade                    org.iatoki.judgels.sandalphon.problem.programming.submission.ProgrammingProblemSubmissionController.regradeSubmissions(req: Request, problemId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")

GET         /problems/programming/:problemId/grading/engine                         org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.editGradingEngine(req: Request, problemId: Long)
POST        /problems/programming/:problemId/grading/engine                         org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.postEditGradingEngine(req: Request, problemId: Long)
GET         /problems/programming/:problemId/grading/config                         org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.editGradingConfig(req: Request, problemId: Long)
POST        /problems/programming/:problemId/grading/config                         org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.postEditGradingConfig(req: Request, problemId: Long)
GET         /problems/programming/:problemId/grading/config/tokilib                 org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.editGradingConfigByTokilibFormat(req: Request, problemId: Long)
GET         /problems/programming/:problemId/grading/config/autoPopulation          org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.editGradingConfigByAutoPopulation(req: Request, problemId: Long)
GET         /problems/programming/:problemId/grading/testdata                       org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.listGradingTestDataFiles(req: Request, problemId: Long)
POST        /problems/programming/:problemId/grading/testdata                       org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.postUploadGradingTestDataFiles(req: Request, problemId: Long)
GET         /problems/programming/:problemId/grading/helpers                        org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.listGradingHelperFiles(req: Request, problemId: Long)
POST        /problems/programming/:problemId/grading/helpers                        org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.postUploadGradingHelperFiles(req: Request, problemId: Long)
GET         /problems/programming/:problemId/grading/languageRestriction            org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.editLanguageRestriction(req: Request, problemId: Long)
POST        /problems/programming/:problemId/grading/languageRestriction            org.iatoki.judgels.sandalphon.problem.programming.grading.ProgrammingProblemGradingController.postEditLanguageRestriction(req: Request, problemId: Long)

GET         /problems/bundle/:problemId/jumpToItems                                 org.iatoki.judgels.sandalphon.problem.bundle.BundleProblemController.jumpToItems(problemId: Long)
GET         /problems/bundle/:problemId/jumpToSubmissions                           org.iatoki.judgels.sandalphon.problem.bundle.BundleProblemController.jumpToSubmissions(problemId: Long)

GET         /problems/bundle/:problemId/items                                       org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.viewItems(req: Request, problemId: Long)
GET         /problems/bundle/:problemId/items/                                      org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.listCreateItems(req: Request, problemId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc", filterString ?= "")
GET         /problems/bundle/:problemId/items/new                                   org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.createItem(req: Request, problemId: Long, itemType, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc", filterString ?= "")
POST        /problems/bundle/:problemId/items                                       org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.postCreateItem(req: Request, problemId: Long, itemType, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc", filterString ?= "")
GET         /problems/bundle/:problemId/items/:itemJid                              org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.editItem(req: Request, problemId: Long, itemJid)
POST        /problems/bundle/:problemId/items/:itemJid                              org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.postEditItem(req: Request, problemId: Long, itemJid)
GET         /problems/bundle/:problemId/items/:itemJid/up                           org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.moveItemUp(req: Request, problemId: Long, itemJid)
GET         /problems/bundle/:problemId/items/:itemJid/down                         org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.moveItemDown(req: Request, problemId: Long, itemJid)
GET         /problems/bundle/:problemId/items/:itemJid/remove                       org.iatoki.judgels.sandalphon.problem.bundle.item.BundleItemController.removeItem(req: Request, problemId: Long, itemJid)

GET         /problems/bundle/:problemId/statements                                  org.iatoki.judgels.sandalphon.problem.bundle.statement.BundleProblemStatementController.viewStatement(req: Request, problemId: Long)

GET         /problems/bundle/:problemId/partners/add                                org.iatoki.judgels.sandalphon.problem.bundle.partner.BundleProblemPartnerController.addPartner(req: Request, problemId: Long)
POST        /problems/bundle/:problemId/partners                                    org.iatoki.judgels.sandalphon.problem.bundle.partner.BundleProblemPartnerController.postAddPartner(req: Request, problemId: Long)
GET         /problems/bundle/:problemId/partners/:partnerId/edit                    org.iatoki.judgels.sandalphon.problem.bundle.partner.BundleProblemPartnerController.editPartner(req: Request, problemId: Long, partnerId: Long)
POST        /problems/bundle/:problemId/partners/:partnerId                         org.iatoki.judgels.sandalphon.problem.bundle.partner.BundleProblemPartnerController.postEditPartner(req: Request, problemId: Long, partnerId: Long)

+nocsrf
POST        /problems/bundle/:problemId/submissions                                 org.iatoki.judgels.sandalphon.problem.bundle.submission.BundleProblemSubmissionController.postSubmit(req: Request, problemId: Long)
GET         /problems/bundle/:problemId/submissions                                 org.iatoki.judgels.sandalphon.problem.bundle.submission.BundleProblemSubmissionController.viewSubmissions(req: Request, problemId: Long)
GET         /problems/bundle/:problemId/submissions/                                org.iatoki.judgels.sandalphon.problem.bundle.submission.BundleProblemSubmissionController.listSubmissions(req: Request, problemId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")
GET         /problems/bundle/:problemId/submissions/:submissionId                   org.iatoki.judgels.sandalphon.problem.bundle.submission.BundleProblemSubmissionController.viewSubmission(req: Request, problemId: Long, submissionId: Long)
GET         /problems/bundle/:problemId/submissions/:submissionId/regrade           org.iatoki.judgels.sandalphon.problem.bundle.submission.BundleProblemSubmissionController.regradeSubmission(req: Request, problemId: Long, submissionId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")
+nocsrf
POST        /problems/bundle/:problemId/submissions/regrade                         org.iatoki.judgels.sandalphon.problem.bundle.submission.BundleProblemSubmissionController.regradeSubmissions(req: Request, problemId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")

GET         /lessons                                                                org.iatoki.judgels.sandalphon.lesson.LessonController.index(req: Request)
GET         /lessons/                                                               org.iatoki.judgels.sandalphon.lesson.LessonController.listLessons(req: Request, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "asc", filterString ?= "")
GET         /lessons/new                                                            org.iatoki.judgels.sandalphon.lesson.LessonController.createLesson(req: Request)
POST        /lessons                                                                org.iatoki.judgels.sandalphon.lesson.LessonController.postCreateLesson(req: Request)

GET         /lessons/:lessonId                                                      org.iatoki.judgels.sandalphon.lesson.LessonController.viewLesson(req: Request, lessonId: Long)
GET         /lessons/:lessonId/edit                                                 org.iatoki.judgels.sandalphon.lesson.LessonController.editLesson(req: Request, lessonId: Long)
POST        /lessons/:lessonId                                                      org.iatoki.judgels.sandalphon.lesson.LessonController.postEditLesson(req: Request, lessonId: Long)

GET         /lessons/:lessonId/enter                                                org.iatoki.judgels.sandalphon.lesson.LessonController.enterLesson(lessonId: Long)

GET         /lessons/:lessonId/jumpToStatements                                     org.iatoki.judgels.sandalphon.lesson.LessonController.jumpToStatement(lessonId: Long)
GET         /lessons/:lessonId/jumpToVersions                                       org.iatoki.judgels.sandalphon.lesson.LessonController.jumpToVersions(lessonId: Long)
GET         /lessons/:lessonId/jumpToPartners                                       org.iatoki.judgels.sandalphon.lesson.LessonController.jumpToPartners(lessonId: Long)

POST        /lessons/:lessonId/switchLanguage                                       org.iatoki.judgels.sandalphon.lesson.LessonController.switchLanguage(req: Request, lessonId: Long)

GET         /lessons/:lessonId/statements                                           org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.viewStatement(req: Request, lessonId: Long)
GET         /lessons/:lessonId/statements/edit                                      org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.editStatement(req: Request, lessonId: Long)
POST        /lessons/:lessonId/statements                                           org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.postEditStatement(req: Request, lessonId: Long)
GET         /lessons/:lessonId/statements/media                                     org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.listStatementMediaFiles(req: Request, lessonId: Long)
POST        /lessons/:lessonId/statements/media                                     org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.postUploadStatementMediaFiles(req: Request, lessonId: Long)
GET         /lessons/:lessonId/statements/languages                                 org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.listStatementLanguages(req: Request, lessonId: Long)
POST        /lessons/:lessonId/statements/languages                                 org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.postAddStatementLanguage(req: Request, lessonId: Long)
GET         /lessons/:lessonId/statements/languages/:language/enable                org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.enableStatementLanguage(req: Request, lessonId: Long, language)
GET         /lessons/:lessonId/statements/languages/:language/disable               org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.disableStatementLanguage(req: Request, lessonId: Long, language)
GET         /lessons/:lessonId/statements/languages/:language/makeDefault           org.iatoki.judgels.sandalphon.lesson.statement.LessonStatementController.makeDefaultStatementLanguage(req: Request, lessonId: Long, language)

GET         /lessons/:lessonId/partners                                             org.iatoki.judgels.sandalphon.lesson.partner.LessonPartnerController.viewPartners(req: Request, lessonId: Long)
GET         /lessons/:lessonId/partners/                                            org.iatoki.judgels.sandalphon.lesson.partner.LessonPartnerController.listPartners(req: Request, lessonId: Long, pageIndex: Long ?= 1, orderBy ?= "id", orderDir ?= "desc")
GET         /lessons/:lessonId/partners/add                                         org.iatoki.judgels.sandalphon.lesson.partner.LessonPartnerController.addPartner(req: Request, lessonId: Long)
POST        /lessons/:lessonId/partners                                             org.iatoki.judgels.sandalphon.lesson.partner.LessonPartnerController.postAddPartner(req: Request, lessonId: Long)
GET         /lessons/:lessonId/partners/:partnerId/edit                             org.iatoki.judgels.sandalphon.lesson.partner.LessonPartnerController.editPartner(req: Request, lessonId: Long, partnerId: Long)
POST        /lessons/:lessonId/partners/:partnerId                                  org.iatoki.judgels.sandalphon.lesson.partner.LessonPartnerController.postEditPartner(req: Request, lessonId: Long, partnerId: Long)

GET         /lessons/:lessonId/versions/history                                     org.iatoki.judgels.sandalphon.lesson.version.LessonVersionController.listVersionHistory(req: Request, lessonId: Long)
GET         /lessons/:lessonId/versions/history/:hash/restore                       org.iatoki.judgels.sandalphon.lesson.version.LessonVersionController.restoreVersionHistory(req: Request, lessonId: Long, hash)
GET         /lessons/:lessonId/versions/local                                       org.iatoki.judgels.sandalphon.lesson.version.LessonVersionController.viewVersionLocalChanges(req: Request, lessonId: Long)
POST        /lessons/:lessonId/versions/local                                       org.iatoki.judgels.sandalphon.lesson.version.LessonVersionController.postCommitVersionLocalChanges(req: Request, lessonId: Long)
GET         /lessons/:lessonId/versions/local/rebase                                org.iatoki.judgels.sandalphon.lesson.version.LessonVersionController.editVersionLocalChanges(req: Request, lessonId: Long)
GET         /lessons/:lessonId/versions/local/discard                               org.iatoki.judgels.sandalphon.lesson.version.LessonVersionController.discardVersionLocalChanges(req: Request, lessonId: Long)

# Internal API
# Note: cannot use /api prefix

GET         /problems/:problemId/statements/render/:mediaFilename                   org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(req: Request, problemId: Long, mediaFilename)
GET         /problems/:problemId/statements/media/:filename                         org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.downloadStatementMediaFile(req: Request, problemId: Long, filename)

GET         /problems/:problemId/render/:mediaFilename                              org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemEditorialAPIController.renderMediaById(req: Request, problemId: Long, mediaFilename)
GET         /problems/:problemId/editorials/render/:mediaFilename                   org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemEditorialAPIController.renderMediaById(req: Request, problemId: Long, mediaFilename)
GET         /problems/:problemId/editorials/media/:filename                         org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemEditorialAPIController.downloadEditorialMediaFile(req: Request, problemId: Long, filename)

GET         /problems/programming/:problemId/render/:mediaFilename                  org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(req: Request, problemId: Long, mediaFilename)
GET         /problems/bundle/:problemId/render/:mediaFilename                       org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(req: Request, problemId: Long, mediaFilename)
GET         /problems/bundle/:problemId/items/render/:mediaFilename                 org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(req: Request, problemId: Long, mediaFilename)

GET         /lessons/:lessonId/statements/render/:mediaFilename                     org.iatoki.judgels.sandalphon.controllers.api.internal.InternalLessonStatementAPIController.renderMediaById(req: Request, lessonId: Long, mediaFilename)
GET         /lessons/:lessonId/render/:mediaFilename                                org.iatoki.judgels.sandalphon.controllers.api.internal.InternalLessonStatementAPIController.renderMediaById(req: Request, lessonId: Long, mediaFilename)
GET         /lessons/:lessonId/statements/media/:filename                           org.iatoki.judgels.sandalphon.controllers.api.internal.InternalLessonStatementAPIController.downloadStatementMediaFile(req: Request, lessonId: Long, filename)

GET         /problems/programming/:problemId/grading/testdata/:filename             org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProgrammingProblemGradingAPIController.downloadGradingTestDataFile(req: Request, problemId: Long, filename)
GET         /problems/programming/:problemId/grading/helpers/:filename              org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProgrammingProblemGradingAPIController.downloadGradingHelperFile(req: Request, problemId: Long, filename)

# Client API v2

GET         /api/v2/client/problems/public-tag-counts                               org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getPublicTagCounts(req: Request)
GET         /api/v2/client/problems/:problemJid                                     org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getProblem(req: Request, problemJid)
GET         /api/v2/client/problems/:problemJid/metadata                            org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getProblemMetadata(req: Request, problemJid)
GET         /api/v2/client/problems/:problemJid/editorial                           org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getProblemEditorial(req: Request, problemJid)
GET         /api/v2/client/problems/:problemJid/programming/submission-config       org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getProblemSubmissionConfig(req: Request, problemJid)
GET         /api/v2/client/problems/:problemJid/programming/worksheet               org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getProgrammingProblemWorksheet(req: Request, problemJid)
GET         /api/v2/client/problems/:problemJid/bundle/worksheet                    org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.getBundleProblemWorksheet(req: Request, problemJid)
+nocsrf
POST        /api/v2/client/problems/jids                                            org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.findProblemsByJids(req: Request)
+nocsrf
POST        /api/v2/client/problems/metadata/jids                                   org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.findProblemMetadatasByJids(req: Request)
+nocsrf
POST        /api/v2/client/problems/editorial/jids                                  org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.findProblemEditorialsByJids(req: Request)
+nocsrf
POST        /api/v2/client/problems/allowed-slug-to-jid                             org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.translateAllowedSlugToJids(req: Request)
+nocsrf
POST        /api/v2/client/problems/tags                                            org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.findProblemJidsByTags(req: Request)
+nocsrf
POST        /api/v2/client/problems/tags/visibility                                 org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientProblemAPIControllerV2.setProblemVisibilityTagsByJids(req: Request)

GET         /api/v2/client/lessons/:lessonJid                                       org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientLessonAPIControllerV2.getLesson(req: Request, lessonJid)
GET         /api/v2/client/lessons/:lessonJid/statement                             org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientLessonAPIControllerV2.getLessonStatement(req: Request, lessonJid)
+nocsrf
POST        /api/v2/client/lessons/jids                                             org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientLessonAPIControllerV2.findLessonsByJids(req: Request)
+nocsrf
POST        /api/v2/client/lessons/allowed-slug-to-jid                              org.iatoki.judgels.sandalphon.controllers.api.client.v2.ClientLessonAPIControllerV2.translateAllowedSlugToJids(req: Request)

# Public API v2

GET         /api/v2/problems/:problemJid/render/:mediaFilename                      org.iatoki.judgels.sandalphon.controllers.api.pub.v2.PublicProblemAPIControllerV2.renderStatementMedia(req: Request, problemJid, mediaFilename)
GET         /api/v2/problems/:problemJid/editorials/render/:mediaFilename           org.iatoki.judgels.sandalphon.controllers.api.pub.v2.PublicProblemAPIControllerV2.renderEditorialMedia(req: Request, problemJid, mediaFilename)
GET         /api/v2/lessons/:lessonJid/render/:mediaFilename                        org.iatoki.judgels.sandalphon.controllers.api.pub.v2.PublicLessonAPIControllerV2.renderMedia(req: Request, lessonJid, mediaFilename)
